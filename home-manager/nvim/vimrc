set spell spelllang=de,en
set background=dark
set autoindent
set nosmartindent
set listchars=tab:Â»\ ,trail:.,extends:#
set list
set ts=3
set number
set scrolloff=5
set sidescrolloff=5
set laststatus=2
set incsearch
set mouse=
set dir=~/.vimhist/
set backupdir=~/.vimhist/bak
set showcmd
highlight Normal ctermfg=white ctermbg=black
nnoremap <silent><cr> :nohlsearch<CR>
vnoremap < <gv
vnoremap > >gv
nnoremap <c-down> <c-w><c-j>
nnoremap <c-up> <c-w><c-k>
nnoremap <c-right> <c-w><c-l>
nnoremap <c-left> <c-w><c-h>
nnoremap <a-left> gT
nnoremap <a-right> gt
let mapleader=","

hi CursorColumn ctermbg=black

set winaltkeys=no
set noai
set cursorline
set cursorcolumn
set si
set sw=3
set pt=<F4>
set ignorecase
set wildmenu
set hlsearch
noremap  <buffer> <silent> <Up>   gk
noremap  <buffer> <silent> <Down> gj
noremap  <buffer> <silent> <Home> g<Home>
noremap  <buffer> <silent> <End>  g<End>
if !exists('g:deoplete#omni#input_patterns')
  let g:deoplete#omni#input_patterns = {}
endif
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
set statusline+=%#warningmsg#
set statusline+=%{syntasticstatuslineflag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_enable_highlighting = 1
let g:syntastic_loc_list_height = 5
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_start_length = 1


" Haskell
hi link ALEError Error
hi Warning term=underline cterm=underline ctermfg=Yellow gui=undercurl guisp=Gold
hi link ALEWarning Warning
hi link ALEInfo SpellCap
let g:LanguageClient_serverCommands = { 'haskell': ['hie-wrapper'] }
nnoremap <F5> :call LanguageClient_contextMenu()<CR>
map <Leader>lk :call LanguageClient#textDocument_hover()<CR>
map <Leader>lg :call LanguageClient#textDocument_definition()<CR>
map <Leader>lr :call LanguageClient#textDocument_rename()<CR>
map <Leader>lf :call LanguageClient#textDocument_formatting()<CR>
map <Leader>lb :call LanguageClient#textDocument_references()<CR>
map <Leader>la :call LanguageClient#textDocument_codeAction()<CR>
map <Leader>ls :call LanguageClient#textDocument_documentSymbol()<CR>
