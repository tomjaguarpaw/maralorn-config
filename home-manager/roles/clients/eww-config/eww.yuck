(deflisten uptime            :initial "0" "bash scripts/listen.sh uptime")
(deflisten warnings          :initial "[]" "bash scripts/listen.sh warnings")
(deflisten warninggroups     :initial "[]" "bash scripts/listen.sh warninggroups")
(deflisten players           :initial "[]" "bash scripts/listen.sh players")
(deflisten calendar          :initial "[]" "bash scripts/listen.sh calendar")
(deflisten timers            :initial "[]" "bash scripts/listen.sh timers")
(deflisten bluetooth         :initial "[]" "bash scripts/listen.sh bluetooth")
(deflisten audio             :initial "[]" "bash scripts/listen.sh audio")
(deflisten networks          :initial "[]" "bash scripts/listen.sh networks")
(deflisten workspaces        :initial "[]" "bash scripts/listen.sh workspaces")
(deflisten idle_state        :initial "{\"at\":1000000000000000,\"idle\":false}" "bash scripts/listen.sh idle_state")

(defpoll alerts :interval "1m" :initial "[]" `curl https://alerts.maralorn.de/api/v2/alerts | jq 'map(select(.status.state != "suppressed"))'`)
(defpoll rbw :interval "5s" :initial false "if rbw unlocked; then echo true; else echo false; fi")
(defpoll host :interval "1440m" :initial "unknown" "cat /etc/hostname")
(defvar disks '{"apollo":["/","/efi"],"hephaistos":["/nix","/efi"],"zeus":["/","/efi"],"unknown":[]}')

(defwidget workspaces [monitor]
  (box :space-evenly false
    (for workspace in workspaces
      (box :space-evenly false :class "workspace ${workspace.monitor != monitor ? "off-screen" : (workspace.active ? "active-workspace" : "")}"
        (for stack in {workspace.stacks}
          (box :orientation "vertical" (for window in stack
            (box :class "window ${window.active ? "active-window" : ""}")
          ))
        )
        (when :if {arraylength(workspace.floating) > 0}
          "+${arraylength(workspace.floating)}"
        )
      )
    )
  )
)

(defwidget time []
  (box {formattime(EWW_TIME, " ${host}   %F KW%V %a   %H:%M:%S ")})
)

(defwidget icon []
  (box :class "icon" (children))
)

(defwidget when [if]
  (box (for entry in {if ? [1] : []} (box (children))))
)

(defwidget icon-bar []
  (box :space-evenly false
    (label :text "${alerts}${rbw}${warnings}${warninggroups}}${players}${uptime}${networks}" :visible false)
    (box :space-evenly false (for group in warninggroups
      (box (icon {group.name}) "${group.count > 1 ? group.count : "" }")
    ))
    (box :space-evenly false (for timer in timers
      (box :class "${EWW_TIME >= timer.at ? "blink" :""}" :space-evenly false
        (icon "󰀠")
        (box :hexpand true :halign "center" :orientation "vertical"
          {timer.name}
          {formattime(EWW_TIME < timer.at ? timer.at - EWW_TIME : EWW_TIME - timer.at,(EWW_TIME < timer.at ? timer.at - EWW_TIME : EWW_TIME - timer.at) > 60*60 ? "%H:%M:%S": "%M:%S","UTC")}
        )
      )
    ))
    (when :if {arraylength(alerts) > 0}
      (icon "󰧠")
      "${arraylength(alerts)}"
    )
    (when :if {!rbw} (icon "") "rbw")
    (box :space-evenly false (for battery in {((EWW_BATTERY ?: {}).BAT0  ?: "") != "" && EWW_BATTERY.BAT0.status != "Charging" && (EWW_BATTERY.BAT0.status != "Not charging" || EWW_BATTERY.BAT0.capacity < 90) && EWW_BATTERY.BAT0.status != "Full"  ? [EWW_BATTERY.BAT0] : []}
      (box (icon "󱊡") "${battery.capacity}%")
    ))
    (box :space-evenly false (for ramwarning in {EWW_RAM.used_mem_perc > 70 ? [1] : []}
      (box :class " ${EWW_RAM.used_mem_perc > 85 ? "blink" : ""}" :space-evenly false
        (box (icon "󰍛") "${round(EWW_RAM.used_mem_perc,0)}%")
      )
    ))
  )
)

(defwidget idle-bar []
  (box :space-evenly false (for x in {idle_state.tag != "Active" ? [""] : []}
    (box :space-evenly false :orientation "horizontal"
      (icon {idle_state.tag == "Idle" ? "󰔟" : "󱦠"})
      (box :halign "end" :hexpand true {idle_state.tag == "Idle" ? formattime(EWW_TIME - idle_state.contents,"%M:%S","UTC") : ""})
    )
  ))
)

(defwidget calendar-bar []
  (box :space-evenly false (for appointment in calendar
    (box :spacing 5
      (label :text "${appointment.start} ${appointment.title}")
    )
  ))
)

(defwidget pipewire-bar []
 (box :halign "start" :space-evenly false (for endpoint in audio
   (box :space-evenly false :class "${endpoint.mute ? "disabled" : ""}"
     (box :orientation "vertical" :valign "center" :space-evenly false
       (box :space-evenly false
         (icon {endpoint.icons})
         (label :text {endpoint.name})
       )
       (progress :value {endpoint.volume})
     )
     (for client in {endpoint.clients}
       (box :class "lighter ${client.mute ? "disabled" : ""}" :orientation "vertical" :space-evenly false
         (label :text {client.name})
         (progress :value {client.volume})
       )
     )
   )
 ))
)

(defwidget players-bar []
  (box :halign "end" (for player in {jq(players,"map(select(.status==\"Playing\"))")}
    (box :space-evenly false :spacing 5
      (box  :space-evenly false :spacing 5
        (icon {player.icon})
        (label :wrap true :text "${player.name} | ${player.title}")
      )
    )
  ))
)

(defwidget topbar [monitor]
  (centerbox :class "topbar"
    (players-bar)
    (centerbox
      (workspaces :monitor monitor)
      (time)
      (box :space-evenly false :spacing 5
        (icon-bar)
        (idle-bar)
      )
    )
    (box :halign "start" :space-evenly false :spacing 5
      (pipewire-bar)
      (calendar-bar)
    )
  )
)


(defwidget info-overlay []
  (box :class "overlay"
    (centerbox :orientation "horizontal" :hexpand true
      (centerbox :orientation "vertical"
        (box :halign "center" :orientation "vertical" :space-evenly false
          (for network in networks
            (box :class "component" :spacing 10 :space-evenly false
              (icon "󰲝")
              network
            )
          )
        )
        (box :halign "center" :class "component" (calendar))
        (box :halign "center" :orientation "vertical" :space-evenly false (for appointment in calendar
          (box :class "component" :orientation "vertical" :space-evenly false
            (box :style "padding-bottom: 10px;" :space-evenly false
              (icon "󰃭")
              (label :halign "center" :hexpand true :justify "left" :text {appointment.title})
            )
            (label :halign "start" :hexpand true :justify "left" :text
  "${appointment.start} → ${appointment.end}${appointment.location != "" ? "
  ${appointment.location}":""}${appointment.description != "" ? "
  ${appointment.description}":""}"
            )
            (label :halign "end" :hexpand true :justify "right" :text {appointment.calendar})
          )
        ))
      )
      (centerbox :orientation "vertical"
        (box :halign "center" :orientation "vertical" :space-evenly false
          (box :orientation "vertical" :space-evenly false (for battery in {((EWW_BATTERY ?: {}).BAT0  ?: "") != "" ? [EWW_BATTERY.BAT0] : []}
            (box :class "component" :space-evenly false
              (icon "󰁹")
              (label :hexpand true :halign "center" :text "${battery.capacity}% ${battery.status}")
            )
          ))
          (for alert in {alerts}
            (box :class "component" :spacing 10 :space-evenly false
              (icon "󰧠")
              (label :hexpand true :halign "center" :text {alert.annotations.description})
            )
          )
          (for warning in {jq(warnings,"map(select(.description!=null))")}
            (box :class "component" :spacing 10 :space-evenly false
              (icon {warning.group})
              (when :if {(warning.subgroup ?: "") != ""}
                (icon {warning.subgroup})
              )
              (label :wrap true :hexpand true :halign "center" :text {warning.description}))
          )
        )
        (box :halign "center" :orientation "vertical" :space-evenly false (for player in players
          (box :class "component" :orientation "vertical" :space-evenly false :spacing 10
            (box  :space-evenly false :spacing 10
              (icon {player.icon})
              (label :hexpand true :halign "center" :text {player.name})
            )
            (label :wrap true :hexpand true :halign "center" :text {player.title})
          )
        ))
        (systray)
      )
      (centerbox :orientation "vertical"
        ""
        (box :halign "center" :orientation "vertical" :space-evenly false :valign "end"
          (box :class "component" :valign "end" :spacing 10 :space-evenly false
            (icon "󰍛")
            "ram"
            "${round(EWW_RAM.used_mem/1024/1024/1024,1)}GB / ${round(EWW_RAM.total_mem/1024/1024/1024,1)}GB"
            (overlay :halign "end" :hexpand true
              (circular-progress :start-at 75 :width 60 :height 60 :thickness 4 :value {EWW_RAM.used_mem_perc})
              "${round(EWW_RAM.used_mem_perc,1)}%"
            )
          )
          (box :class "component" :valign "end" :spacing 10 :space-evenly false
            (icon "")
            "swap"
            "${round((EWW_RAM.total_swap - EWW_RAM.free_swap)/1024/1024/1024,1)}GB / ${round(EWW_RAM.total_swap/1024/1024/1024,1)}GB"
            (overlay :halign "end" :hexpand true
              (circular-progress :start-at 75 :width 60 :height 60 :thickness 4 :value {100 * (EWW_RAM.total_swap - EWW_RAM.free_swap)/EWW_RAM.total_swap})
              "${round(100 * (EWW_RAM.total_swap - EWW_RAM.free_swap)/EWW_RAM.total_swap,1)}%"
            )
          )
          (box :orientation "vertical" :space-evenly false
            (for disk in {disks[host]}
              (box :class "component" :valign "end" :spacing 10 :space-evenly false
                (icon "")
                {disk}
                "${round(EWW_DISK[disk].used/1024/1024/1024,1)}GB / ${round(EWW_DISK[disk].total/1024/1024/1024,1)}GB"
                (overlay :halign "end" :hexpand true
                  (circular-progress :start-at 75 :width 60 :height 60 :thickness 4 :value {EWW_DISK[disk].used_perc})
                  "${round(EWW_DISK[disk].used_perc,1)}%"
                )
              )
            )
          )
        )
        "status uptime: ${formattime(EWW_TIME - uptime, "%H:%M:%S", "UTC")}"
      )
    )
  )
)

(defwindow overlay-0
  :monitor 0
  :focusable false
  :stacking "overlay"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "100%"
                      :anchor "top left")
  (info-overlay)
)

(defwindow topbar-0
  :monitor 0
  :focusable false
  :exclusive true
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "20px"
                      :anchor "top center")
  (topbar :monitor 0)
)

(defwindow overlay-1
  :monitor 1
  :focusable false
  :stacking "overlay"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "100%"
                      :anchor "top left")
  (info-overlay)
)

(defwindow topbar-1
  :monitor 1
  :focusable false
  :exclusive true
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "20px"
                      :anchor "top center")
  (topbar :monitor 1)
)
