(deflisten mode              :initial "warning" "bash scripts/listen.sh mode")
(deflisten uptime            :initial "0" "bash scripts/listen.sh uptime")
(deflisten warnings          :initial "[]" "bash scripts/listen.sh warnings")
(deflisten warninggroups     :initial "[]" "bash scripts/listen.sh warninggroups")
(deflisten players           :initial "[]" "bash scripts/listen.sh players")
(deflisten calendar          :initial "[]" "bash scripts/listen.sh calendar")
(deflisten timers            :initial "[]" "bash scripts/listen.sh timers")
(deflisten bluetooth         :initial "[]" "bash scripts/listen.sh bluetooth")
(deflisten audio             :initial "[]" "bash scripts/listen.sh audio")
(deflisten networks          :initial "[]" "bash scripts/listen.sh networks")
(deflisten idle_state        :initial "{\"at\":1000000000000000,\"idle\":false}" "bash scripts/listen.sh idle_state")

(defpoll alerts :interval "1m" :initial "[]" `curl https://alerts.maralorn.de/api/v2/alerts | jq 'map(select(.status.state != "suppressed"))'`)
(defpoll rbw :interval "5s" :initial false "if rbw unlocked; then echo true; else echo false; fi")
(defpoll host :interval "1440m" :initial "unknown" "cat /etc/hostname")
(defvar disks '{"apollo":["/","/boot/EFI"],"hephaistos":["/nix","/efi"],"zeus":["/","/efi"],"unknown":[]}')

(defwidget time []
  (box :class "component time" :orientation "vertical" :valign "end" :space-evenly false
  )
)

(defwidget status []
  (box :space-evenly false :vexpand false :orientation "vertical"
    (label :text "${alerts}${rbw}${mode}${warnings}${warninggroups}}${players}${uptime}${networks}" :visible false)
    (box :class "time" :halign "center" :space-evenly false {formattime(EWW_TIME, " ${host}   %F KW%V %a   %H:%M:%S")})
    (box :space-evenly false :vexpand false
      (box :orientation "vertical" :space-evenly false (for group in warninggroups
        (box :space-evenly false (image :path "icons/${group.name}.png") {group.count})
      ))
      (box :orientation "vertical" :space-evenly false (for timer in timers
        (box :class "${EWW_TIME >= timer.at ? "blink" :""}" :space-evenly false (image :path "icons/timer.png") (box :hexpand true :halign "center" :orientation "vertical" {timer.name} {formattime(EWW_TIME < timer.at ? timer.at - EWW_TIME : EWW_TIME - timer.at,(EWW_TIME < timer.at ? timer.at - EWW_TIME : EWW_TIME - timer.at) > 60*60 ? "%H:%M:%S": "%M:%S","UTC")}))
      ))
      (box :orientation "vertical" :space-evenly false (for alert in {mode != "Klausur" && arraylength(alerts) > 0 ? [1] : []}
        (box :space-evenly false (image :path "icons/cloud-alert.png") (label :text "${arraylength(alerts)}"))
      ))
      (box :orientation "vertical" :space-evenly false (for rbwfile in {rbw ? [] : [1]}
        (box :space-evenly false (image :path "icons/lock-alert.png") (label :text "rbw"))
      ))
      (box :orientation "vertical" :space-evenly false (for battery in {((EWW_BATTERY ?: {}).BAT0  ?: "") != "" && EWW_BATTERY.BAT0.status != "Charging" && (EWW_BATTERY.BAT0.status != "Not charging" || EWW_BATTERY.BAT0.capacity < 90) && EWW_BATTERY.BAT0.status != "Full"  ? [EWW_BATTERY.BAT0] : []}
        (box :space-evenly false (image :path "icons/battery-alert.png") (label :text "${battery.capacity}%"))
      ))
      (box :orientation "vertical" :space-evenly false (for ramwarning in {EWW_RAM.used_mem_perc > 70 ? [1] : []}
        (box :class " ${EWW_RAM.used_mem_perc > 85 ? "blink" : ""}" :space-evenly false (image :path "icons/memory.png") (label :text "${round(EWW_RAM.used_mem_perc,0)}%"))
      ))
    )
  )
)

(defwidget bottom []
   (box :space-evenly false :valign "end"
      (box :orientation "vertical" :space-evenly false (for x in {idle_state.tag != "Active" ? [""] : []}
        (box :space-evenly false :orientation "horizontal"
          (image :path "icons/${idle_state.tag == "Idle" ? "idle" : "no-idle"}.png")
          (box :halign "center" :hexpand true "idle")
          (box :halign "end" :hexpand true {idle_state.tag == "Idle" ? formattime(EWW_TIME - idle_state.contents,"%M:%S","UTC") : "off"})
        )
      ))
      (box :orientation "vertical" :space-evenly false (for endpoint in audio
        (box :class "${endpoint.mute ? "disabled" : ""}" :orientation "vertical" :space-evenly false
          (box :orientation "horizontal" :space-evenly false
            (for icon in {endpoint.icons} (image :image-width 14 :image-height 14 :path "icons/${icon}.png"))
            (label :width 60 :wrap true :justify "center" :hexpand true :text {endpoint.name})
          )
          (progress :value {endpoint.volume})
          (for client in {endpoint.clients}
            (box :class "lighter ${client.mute ? "disabled" : ""}" :orientation "vertical" :space-evenly false
              (label :width 60 :wrap true :justify "center" :hexpand true :text {client.name})
              (progress :value {client.volume})
            )
          )
        )
      ))
      (box :orientation "vertical" :space-evenly false (for appointment in calendar
        (box :orientation "vertical" :space-evenly false :spacing 10
          (label :width 80 :wrap true :justify "center" :text {appointment.title})
        )
      ))
   )
)

(defwidget sidebar []
  (centerbox :class "tophud" :orientation "vertical"
    (status)
    (box :orientation "vertical" :space-evenly false (for player in {jq(players,"map(select(.status==\"Playing\"))")}
      (box :orientation "vertical" :space-evenly false :spacing 10
        (box  :space-evenly false :spacing 10
          (image :image-width 20 :image-height 20 :path "icons/${player.status}.png")
          (label :justify "center" :wrap true :text "${player.name} | ${player.title}")
        )
      )
    ))
    (bottom)
  )
)


(defwidget info-overlay []
  (box :class "overlay"
    (centerbox :orientation "horizontal" :hexpand true
      (centerbox :orientation "vertical"
        (box :halign "center" :orientation "vertical" :space-evenly false
          (for network in networks
            (box :class "component" :spacing 10 :space-evenly false
              (image :path "icons/network.png")
              network
            )
          )
        )
        (box :halign "center" :class "component" (calendar))
        (box :halign "center" :orientation "vertical" :space-evenly false (for appointment in calendar
          (box :class "component" :orientation "vertical" :space-evenly false
            (box :style "padding-bottom: 10px;" :space-evenly false (image :path "icons/calendar.png") (label :halign "center" :hexpand true :justify "left" :text {appointment.title}))
            (label :halign "start" :hexpand true :justify "left" :text
  "${appointment.start} â†’ ${appointment.end}${appointment.location != "" ? "
  ${appointment.location}":""}${appointment.description != "" ? "
  ${appointment.description}":""}"
            )
            (label :halign "end" :hexpand true :justify "right" :text {appointment.calendar})
          )
        ))
      )
      (centerbox :orientation "vertical"
        ""
        (box :halign "center" :orientation "vertical" :space-evenly false (for player in players
          (box :class "component" :orientation "vertical" :space-evenly false :spacing 10
            (box  :space-evenly false :spacing 10 (image :image-width 20 :image-height 20 :path "icons/${player.status}.png") (label :hexpand true :halign "center" :text {player.name}))
            (label :justify "left" :hexpand true :halign "start" :text {player.title})
          )
        ))
        (box :halign "center" :orientation "vertical" :space-evenly false
          (box :orientation "vertical" :space-evenly false (for battery in {((EWW_BATTERY ?: {}).BAT0  ?: "") != "" ? [EWW_BATTERY.BAT0] : []}
            (box :class "component" :space-evenly false (image :path "icons/battery-alert.png") (label :hexpand true :halign "center" :text "${battery.capacity}% ${battery.status}"))
          ))
          (for alert in {alerts}
            (box :class "component" :spacing 10 :space-evenly false (image :path "icons/cloud-alert.png") (label :hexpand true :halign "center" :text {alert.annotations.description}))
          )
          (for warning in {jq(warnings,"map(select(.description!=null))")}
            (box :class "component" :spacing 10 :space-evenly false
              (image :path "icons/${warning.group}.png")
              (for subgroup in {(warning.subgroup ?: "") != "" ? [warning.subgroup] : []}
                (image :path "icons/${subgroup}.png")
              )
              (label :hexpand true :halign "center" :text {warning.description}))
          )
        )
      )
      (centerbox :orientation "vertical"
        ""
        (box :halign "center" :orientation "vertical" :space-evenly false :valign "end"
          (box :class "component" :valign "end" :spacing 10 :space-evenly false
            (image :path "icons/memory.png")
            "ram"
            "${round(EWW_RAM.used_mem/1024/1024/1024,1)}GB / ${round(EWW_RAM.total_mem/1024/1024/1024,1)}GB"
            (overlay :halign "end" :hexpand true
              (circular-progress :start-at 75 :width 60 :height 60 :thickness 4 :value {EWW_RAM.used_mem_perc})
              "${round(EWW_RAM.used_mem_perc,1)}%"
            )
          )
          (box :class "component" :valign "end" :spacing 10 :space-evenly false
            (image :path "icons/disk.png")
            "swap"
            "${round((EWW_RAM.total_swap - EWW_RAM.free_swap)/1024/1024/1024,1)}GB / ${round(EWW_RAM.total_swap/1024/1024/1024,1)}GB"
            (overlay :halign "end" :hexpand true
              (circular-progress :start-at 75 :width 60 :height 60 :thickness 4 :value {100 * (EWW_RAM.total_swap - EWW_RAM.free_swap)/EWW_RAM.total_swap})
              "${round(100 * (EWW_RAM.total_swap - EWW_RAM.free_swap)/EWW_RAM.total_swap,1)}%"
            )
          )
          (box :orientation "vertical" :space-evenly false
            (for disk in {disks[host]}
              (box :class "component" :valign "end" :spacing 10 :space-evenly false
                (image :path "icons/disk.png")
                {disk}
                "${round(EWW_DISK[disk].used/1024/1024/1024,1)}GB / ${round(EWW_DISK[disk].total/1024/1024/1024,1)}GB"
                (overlay :halign "end" :hexpand true
                  (circular-progress :start-at 75 :width 60 :height 60 :thickness 4 :value {EWW_DISK[disk].used_perc})
                  "${round(EWW_DISK[disk].used_perc,1)}%"
                )
              )
            )
          )
        )
        "status uptime: ${formattime(EWW_TIME - uptime, "%H:%M:%S", "UTC")}"
      )
    )
  )
)

(defwindow overlay
  :monitor 0
  :stacking "overlay"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "100%"
                      :anchor "top left")
  (info-overlay)
)

(defwindow topbar [screen]
  :monitor 0
  :focusable false
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width { screen == "small" ? "41%" : "20%" }
                      :height "100px"
                      :anchor { screen == "small" ? "top right" : "top center"})
  (sidebar)
)
