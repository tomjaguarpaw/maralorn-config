(deflisten mode              :initial "warning" "bash scripts/listen.sh mode")
(deflisten warnings          :initial "[]" "bash scripts/listen.sh warnings")
(deflisten warninggroups     :initial "[]" "bash scripts/listen.sh warninggroups")
(deflisten players           :initial "[]" "bash scripts/listen.sh players")
(deflisten calendar          :initial "[]" "bash scripts/listen.sh calendar")
(deflisten timers            :initial "[]" "bash scripts/listen.sh timers")
(deflisten bluetooth         :initial "[]" "bash scripts/listen.sh bluetooth")
(deflisten audio             :initial "[]" "bash scripts/listen.sh audio")
(deflisten workspaces        :initial "[]" "bash scripts/get-workspaces.sh")
(deflisten keymap            :initial "German (Neo 2)" "bash scripts/get-keymap.sh")
(deflisten current_workspace :initial "1" "bash scripts/get-active-workspace.sh")

(defpoll alerts :interval "1m" :initial "[]" `curl https://alerts.maralorn.de/api/v1/alerts | jq '.data | map(select(.status.state != "suppressed"))'`)
(defpoll ssh-agent :interval "5s" "ssh-add -L")
(defpoll rbw :interval "5s" :initial false "if rbw unlocked; then echo true; else echo false; fi")
(defpoll host :interval "1440m" :initial "unknown" "cat /etc/hostname")
(defvar disks '{"apollo":["/","/boot/EFI"],"zeus":["/disk"],"unknown":[]}')

(defwidget workspaces []
  (box :orientation "horizontal"
    (label :text "${workspaces}${current_workspace}" :visible false)
    (for workspace in workspaces
      (box :class "component ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
        (label :text "${arraylength(workspaces) < 4 ? workspace.windows : ""}")
      )
    )
  )
)

(defwidget time []
  (box :class "component time" :orientation "vertical" :valign "end" :space-evenly false
    {formattime(EWW_TIME, "%F")}
    {formattime(EWW_TIME, "KW%V %a")}
    {formattime(EWW_TIME, "%H:%M")}
  )
)

(defwidget status []
  (box :orientation "vertical" :space-evenly false
    (label :text "${alerts}${rbw}${ssh-agent}${mode}${warnings}${warninggroups}}${players}" :visible false)
    (box :class "component" (image :path "icons/${mode}.png"))
    (box :orientation "vertical" :space-evenly false (for group in warninggroups
      (box :class "component" (image :path "icons/${group.name}.png") {group.count})
    ))
    (box :orientation "vertical" :space-evenly false (for timer in timers
      (box :class "component small ${EWW_TIME >= timer.at ? "blink" :""}" :space-evenly false (image :path "icons/timer.png") (box :hexpand true :halign "center" :orientation "vertical" {timer.name} {formattime(EWW_TIME < timer.at ? timer.at - EWW_TIME : EWW_TIME - timer.at,(EWW_TIME < timer.at ? timer.at - EWW_TIME : EWW_TIME - timer.at) > 60*60 ? "%H:%M:%S": "%M:%S","UTC")}))
    ))
    (box :orientation "vertical" :space-evenly false (for alert in {mode != "Klausur" && arraylength(alerts) > 0 ? [1] : []}
      (box :class "component" (image :path "icons/cloud-alert.png") (label :text "${arraylength(alerts)}"))
    ))
    (box :orientation "vertical" :space-evenly false (for rbwfile in {rbw ? [] : [1]}
      (box :class "component" (image :path "icons/lock-alert.png") (label :text "rbw"))
    ))
    (box :orientation "vertical" :space-evenly false (for ssh in {ssh-agent == "" ? [1] : []}
      (box :class "component" (image :path "icons/lock-alert.png") (label :text "ssh"))
    ))
    (box :orientation "vertical" :space-evenly false (for keyboard in {keymap != "German (Neo 2)" ? [1] : []}
      (box :class "component small" (image :path "icons/keyboard.png") (label :text keymap))
    ))
    (box :orientation "vertical" :space-evenly false (for battery in {((EWW_BATTERY ?: {}).BAT0  ?: "") != "" ? [EWW_BATTERY.BAT0] : []}
      (box :class "component" (image :path "icons/battery-alert.png") (label :text "${battery.capacity}%"))
    ))
  )
)

(defwidget bottom []
   (box :orientation "vertical" :space-evenly false :valign "end"
      (box :orientation "vertical" :space-evenly false (for endpoint in audio
        (box :class "component small" :orientation "vertical" :space-evenly false
        (label :width 80 :wrap true :justify "center" :text {endpoint.name})
          (for client in {endpoint.clients} (label :class "component lighter" :width 70 :wrap true :justify "center" :text {client.name}))
        )
      ))
      (box :orientation "vertical" :space-evenly false (for device in bluetooth
        (box :class "component small" :space-evenly false (image :path "icons/bluetooth.png") (label :width 60 :wrap true :justify "center" :text device))
      ))
      (workspaces)
      (box :orientation "vertical" :space-evenly false (for appointment in calendar
        (box :class "component" :orientation "vertical" :space-evenly false :spacing 10
          (label :class "small" :width 80 :wrap true :justify "center" :text {appointment.title})
        )
      ))
      (time)
   )
)

(defwidget sidebar []
  (centerbox :orientation "vertical"
    (status)
    (box :orientation "vertical" :space-evenly false (for player in {jq(players,"map(select(.status==\"Playing\"))")}
      (box :class "component" :orientation "vertical" :space-evenly false :spacing 10
        (box  :space-evenly false :spacing 10 (image :image-width 20 :image-height 20 :path "icons/${player.status}.png") (label :hexpand true :halign "center" :text {player.name}))
        (label :class "small" :width 80 :wrap true :justify "center" :text {player.title})
      )
    ))
    (bottom)
  )
)


(defwidget info-overlay []
  (box :class "overlay"
    (centerbox :halign "center" :orientation "vertical"
      (box :orientation "vertical" :space-evenly false
        (box :orientation "vertical" :space-evenly false (for player in players
          (box :class "component" :orientation "vertical" :space-evenly false :spacing 10
            (box  :space-evenly false :spacing 10 (image :image-width 20 :image-height 20 :path "icons/${player.status}.png") (label :hexpand true :halign "center" :text {player.name}))
            (label :class "small" :justify "left" :hexpand true :halign "start" :text {player.title})
          )
        ))
        (for warning in {warnings}
          (box :class "component" :spacing 10 :space-evenly false
            (image :path "icons/${warning.group}.png")
            (for subgroup in {(warning.subgroup ?: "") != "" ? [warning.subgroup] : []}
              (image :path "icons/${subgroup}.png")
            )
            (label :hexpand true :halign "center" :text {warning.description}))
        )
        (for alert in {alerts}
          (box :class "component small" :spacing 10 :space-evenly false (image :path "icons/cloud-alert.png") (label :hexpand true :halign "center" :text {alert.annotations.description}))
        )
        (box :orientation "vertical" :space-evenly false (for battery in {((EWW_BATTERY ?: {}).BAT0  ?: "") != "" ? [EWW_BATTERY.BAT0] : []}
          (box :class "component" :space-evenly false (image :path "icons/battery-alert.png") (label :hexpand true :halign "center" :text "${battery.capacity}% ${battery.status}"))
        ))
      )
      (box :orientation "vertical" :space-evenly false
        (box :class "component" (calendar))
        (box :orientation "vertical" :space-evenly false (for appointment in calendar
          (box :class "component" :orientation "vertical" :space-evenly false
            (box :style "padding-bottom: 10px;" :space-evenly false (image :path "icons/calendar.png") (label :halign "center" :hexpand true :justify "left" :text {appointment.title}))
            (label :halign "start" :hexpand true :justify "left" :class "small" :text
"${appointment.start} â†’ ${appointment.end}${appointment.location != "" ? "
${appointment.location}":""}${appointment.description != "" ? "
${appointment.description}":""}"
            )
            (label :halign "end" :hexpand true  :justify "right" :class "small" :text {appointment.calendar})
          )
        ))
      )
      (box :orientation "vertical" :class "small" :space-evenly false :valign "end"
        (box :class "component" :valign "end" :spacing 10 :space-evenly false
          (image :path "icons/memory.png")
          "ram"
          "${round(EWW_RAM.used_mem/1024/1024/1024,1)}GB / ${round(EWW_RAM.total_mem/1024/1024/1024,1)}GB"
          (overlay :halign "end" :hexpand true
            (circular-progress :start-at 75 :width 60 :height 60 :thickness 4 :value {EWW_RAM.used_mem_perc})
            "${round(EWW_RAM.used_mem_perc,1)}%"
          )
        )
        (box :class "component" :valign "end" :spacing 10 :space-evenly false
          (image :path "icons/disk.png")
          "swap"
          "${round((EWW_RAM.total_swap - EWW_RAM.free_swap)/1024/1024/1024,1)}GB / ${round(EWW_RAM.total_swap/1024/1024/1024,1)}GB"
          (overlay :halign "end" :hexpand true
            (circular-progress :start-at 75 :width 60 :height 60 :thickness 4 :value {100 * (EWW_RAM.total_swap - EWW_RAM.free_swap)/EWW_RAM.total_swap})
            "${round(100 * (EWW_RAM.total_swap - EWW_RAM.free_swap)/EWW_RAM.total_swap,1)}%"
          )
        )
        (for disk in {disks[host]}
          (box :class "component" :valign "end" :spacing 10 :space-evenly false
            (image :path "icons/disk.png")
            {disk}
            "${round(EWW_DISK[disk].used/1024/1024/1024,1)}GB / ${round(EWW_DISK[disk].total/1024/1024/1024,1)}GB"
            (overlay :halign "end" :hexpand true
              (circular-progress :start-at 75 :width 60 :height 60 :thickness 4 :value {EWW_DISK[disk].used_perc})
              "${round(EWW_DISK[disk].used_perc,1)}%"
            )
          )
        )
      )
    )
  )
)

(defwindow overlay
  :monitor 0
  :stacking "overlay"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "100%"
                      :anchor "top right")
  (info-overlay)
)

(defwindow bar
  :monitor 0
  :exclusive true
  :focusable false
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100px"
                      :height "100%"
                      :anchor "left center")
  (sidebar)
)
